<?xml version="1.0" encoding="UTF-8"?>
<coverage>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='firstNonNull' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='hashCode' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='sizeOf' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='5'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='9'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='firstNonNull' number='4'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='mergeServerLists' number='1'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='setServers' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='getOutputWriters' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.StdOutWriter' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='6'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonUtils' method='getJmxProcess' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='firstNonNull' number='5'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='getObj' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='mergeServerLists' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveList' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='1'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='setName' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='sizeOf' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='<init>' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParserTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='<clinit>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$PropertyResolverFunc' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$PropertyResolverFunc' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='getAttr' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='firstNonNull' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$PropertyResolverFunc' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='getKeys' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParserTest' method='continueParsingOnErrorIfRequested' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='1'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='<init>' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='mergeServerLists' number='6'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='<clinit>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$ObjectPropertyResolverFunc' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$ObjectPropertyResolverFunc' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='getResultAlias' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='1'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='8'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='4'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.IdentityValueTransformer' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests.identityTransformerDoesNothing(com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettingsWithDefault(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='firstNonNull' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveMap' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='getServers' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.continueParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.exceptions.LifecycleException' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParserTest' method='failParsingOnErrorIfRequested' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='parseServers' number='7'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.failParsingOnErrorIfRequested(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$1200' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='builder' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='equals' number='6'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='equals' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='6'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getHost' number='4'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$300' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$1000' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='mergeServerLists' number='2'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='builder' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='build' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='addQueries' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$500' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='builder' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getHost' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getUsername' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getPort' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$1100' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setHost' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='mergeServerLists' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getCronExpression' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='mergeServerLists' number='5'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='setObj' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='8'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='equals' number='4'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getAlias' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getPort' number='4'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getHost' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='4'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='equals' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParserTest' method='mergeAlreadyExistingServerDoesNotModifyList' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$900' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$200' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getPassword' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getNumQueryThreads' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setPort' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='equals' number='8'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='build' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$700' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$400' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='addQuery' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerFixtures' method='createServerWithOneQuery' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getPort' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$600' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getQueries' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParser' method='merge' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='access$800' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.mergeAlreadyExistingServerDoesNotModifyList(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParserTest' method='sameServerWithTwoDifferentQueriesMergesQueries' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.sameServerWithTwoDifferentQueriesMergesQueries(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.ConfigurationParserTest' method='testMerge' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='setResultAlias' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setCronExpression' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setUsername' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='addKeys' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setPassword' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='equals' number='3'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setNumQueryThreads' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setAlias' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='addAttr' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='addKey' number='0'><tests>
<test name='com.googlecode.jmxtrans.ConfigurationParserTest.testMerge(com.googlecode.jmxtrans.ConfigurationParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='16'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='parseConfiguration' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='18'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='getOptions' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='canParseRunInterval' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='10'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='2'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='4'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='35'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='25'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='12'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='requiredOptions' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='getRunPeriod' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='requiredOptionsAnd' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='setJsonDirOrFile' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='getJsonDirOrFile' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='36'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='createMockConfigurationFile' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='38'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='11'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='setRunPeriod' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='isHelp' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='13'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='24'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='15'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='34'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.canParseRunInterval(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='isContinueOnJsonError' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='setContinueOnJsonError' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='continueOnJsonErrorIsCanBeSetToTrueOrFalse' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='3'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsCanBeSetToTrueOrFalse(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='continueOnJsonErrorIsFalseByDefault' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.continueOnJsonErrorIsFalseByDefault(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.OptionsException' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='8'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigDirectoryCannotBeAFile' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigDirectoryCannotBeAFile' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='6'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='5'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryCannotBeAFile(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigDirectoryMustExist' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigDirectoryMustExist' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigDirectoryMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigFileCannotBeADirectory' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigFileCannotBeADirectory' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='14'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigFileMustExist' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonConfigFileMustExist' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='37'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonDirectoryOrJsonFileIsRequired' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='jsonDirectoryOrJsonFileIsRequired' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.jsonDirectoryOrJsonFileIsRequired(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='27'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.JmxTransConfiguration' method='setHelp' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='32'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='33'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='noExceptionThrownWhenHelpIsAsked' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.noExceptionThrownWhenHelpIsAsked(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='20'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='22'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='quartzConfigFileCannotBeADirectory' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='19'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='quartzConfigFileCannotBeADirectory' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileCannotBeADirectory(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='quartzConfigFileMustExist' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='quartzConfigFileMustExist' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.quartzConfigFileMustExist(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='runIntervalMustBeInteger' number='1'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParser' method='parseOptions' number='26'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.cli.CliArgumentParserTest' method='runIntervalMustBeInteger' number='0'><tests>
<test name='com.googlecode.jmxtrans.cli.CliArgumentParserTest.runIntervalMustBeInteger(com.googlecode.jmxtrans.cli.CliArgumentParserTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest.testDatagramSocketFactoryMakeObject(com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.DatagramSocketFactory' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest.testDatagramSocketFactoryMakeObject(com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.DatagramSocketFactory' method='makeObject' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest.testDatagramSocketFactoryMakeObject(com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest' method='testDatagramSocketFactoryMakeObject' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest.testDatagramSocketFactoryMakeObject(com.googlecode.jmxtrans.connections.DatagramSocketFactoryTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='equals' number='4'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='1'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='equals' number='8'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='equals' number='2'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='6'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='equals' number='6'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='equals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='hashCode' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsDifferentUrlAndNoEnvironmentHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsSameUrlAndNoEnvironmentAreEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsSameUrlAndNoEnvironmentHaveSameHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='5'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='asList' number='2'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='asList' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsWithArrayAsEnvironmentValueAreEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='asList' number='1'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='asList' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='2'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithArrayAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentArrayAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JMXConnectionParams' method='convertArraysToLists' number='4'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsWithDifferentEnvironmentsAreNotEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentEnvironmentsHaveDifferentHashCodes(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithDifferentListsAsEnvironmentValueAreNotEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='connectionParamsWithListsAsEnvironmentValueAreEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.connectionParamsWithListsAsEnvironmentValueAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='twoDifferentConnectionParamsAreEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsAreEquals(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests' method='twoDifferentConnectionParamsHaveTheSameHashCode' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.JmxConnectionParamsTests.twoDifferentConnectionParamsHaveTheSameHashCode(com.googlecode.jmxtrans.connections.JmxConnectionParamsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='stop' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='getLocalSocketAddress' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='getLocalSocketAddress' number='1'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='5'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='processRequests' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer$1' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='processRequests' number='5'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='start' number='6'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='closedSocketIsInvalid' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='4'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='start' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='2'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='stop' number='1'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='processRequests' number='8'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='stop' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='processRequests' number='2'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='closedSocketIsInvalid' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='start' number='2'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='start' number='4'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='makeObject' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='getLocalSocketAddress' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='processRequests' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='access$002' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='startEchoServer' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='access$100' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='stopEchoServer' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.TCPEchoServer' method='access$000' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.closedSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='createdSocketIsValid' number='3'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='12'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='10'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='6'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='createdSocketIsValid' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='8'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.createdSocketIsValid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactoryTests' method='nullSocketIsInvalid' number='0'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.connections.SocketFactory' method='validateObject' number='1'><tests>
<test name='com.googlecode.jmxtrans.connections.SocketFactoryTests.nullSocketIsInvalid(com.googlecode.jmxtrans.connections.SocketFactoryTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='fetchResults' number='5'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='getCallback' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='runOutputWritersForQuery' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='processQuery' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='CGLIB$BIND_CALLBACKS' number='5'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='addOutputWriter' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='equals' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='14'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResults' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='getCallback' number='4'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='getCallback' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='CGLIB$BIND_CALLBACKS' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='doWrite' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='fetchResults' number='6'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResults' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='processQuery' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='equals' number='6'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='equals' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='21'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getNewResultObject' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResults' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='doWrite' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='CGLIB$BIND_CALLBACKS' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='9'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='processQuery' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='fetchResults' number='7'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='equals' number='5'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='runOutputWritersForQuery' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='4'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxProcessingTests' method='startMBeanServer' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='equals' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='CGLIB$BIND_CALLBACKS' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='fetchResults' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='24'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='<clinit>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='runOutputWritersForQuery' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='setCallbacks' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxProcessingTests$TestBean' method='getDummyValue' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getValues' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxProcessingTests' method='querySimpleAttribute' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='processQuery' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxProcessingTests$TestBean' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='fetchResults' number='12'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='doWrite' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='CGLIB$STATICHOOK1' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='runOutputWritersForQuery' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='19'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='23'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxProcessingTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.OutputWriter$$EnhancerByMockitoWithCGLIB$$b24c6404' method='CGLIB$BIND_CALLBACKS' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxQueryProcessor' method='fetchResults' number='8'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query$Builder' method='addOutputWriters' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResults' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxProcessingTests.querySimpleAttribute(com.googlecode.jmxtrans.jmx.JmxProcessingTests)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getAttributeName' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getTypeName' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='getRuntime' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='initConfiguration' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getClassName' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canCreateBasicResultData' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getKeyAlias' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canCreateBasicResultData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='getMemory' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='7'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='4'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='8'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='6'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canReadCompositeData' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadCompositeData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='convertKeysToString' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='convertKeysToString' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='22'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='convertKeysToString' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='convertKeysToString' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canReadMapData' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canReadMapDataWithNonStringKeys' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadMapDataWithNonStringKeys(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canReadSingleBooleanValue' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleBooleanValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canReadSingleIntegerValue' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadSingleIntegerValue(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest' method='canReadTabularData' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest$ByAttributeName' method='apply' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='2'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='6'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='9'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='1'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='5'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest$ByAttributeName' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='12'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='getResult' number='20'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='4'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='11'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='7'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessor' method='processTabularDataSupport' number='3'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest$ByAttributeName' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.jmx.JmxResultProcessorTest.canReadTabularData(com.googlecode.jmxtrans.jmx.JmxResultProcessorTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.EqualsTests' method='testQuery' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.EqualsTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery(com.googlecode.jmxtrans.model.EqualsTests)'/>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.EqualsTests' method='testQuery2' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.EqualsTests.testQuery2(com.googlecode.jmxtrans.model.EqualsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='8'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='setSomeProperties' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='16'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='12'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='13'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='10'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='15'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='testList' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveString' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveString' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='removeSystemProperties' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testList(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$ObjectPropertyResolverFunc' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$ObjectPropertyResolverFunc' method='apply' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver$ObjectPropertyResolverFunc' method='apply' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='testMap' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='9'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='testProps' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='7'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveProps' number='14'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveString' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveString' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testProps(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolverTests' method='testResolveMap' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.PropertyResolver' method='resolveString' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.PropertyResolverTests.testResolveMap(com.googlecode.jmxtrans.model.PropertyResolverTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='equals' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='testEquals' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testEquals(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getPort' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server$Builder' method='setUrl' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='testGetHostAndPortFromUrl' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getHost' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getHost' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getPort' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='extractPortFromUrl' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='extractPortFromUrl' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='extractPortFromUrl' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetHostAndPortFromUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getUrl' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getUrl' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getUrl' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getUrl' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='testGetUrl' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getUrl' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testGetUrl(com.googlecode.jmxtrans.model.ServerTests)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='hashCode' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='testHashCode' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='testHashCode' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.ServerTests' method='testHashCode' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.ServerTests.testHashCode(com.googlecode.jmxtrans.model.ServerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='7'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='8'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='7'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='splitTypeNameValue' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='splitTypeNameValue' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='splitTypeNameValue' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValuesSeparator' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValuesSeparator' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getConcatedTypeNameValues' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='testGetConcatenatedTypeNameValues' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetConcatenatedTypeNameValues(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='makeMap' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='makeMap' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='splitTypeNameValue' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='makeMap' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='makeMap' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtils' method='getTypeNameValueMap' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='makeMap' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.KeyUtilsTests' method='testGetTypeNameValueMap' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.KeyUtilsTests.testGetTypeNameValueMap(com.googlecode.jmxtrans.model.naming.KeyUtilsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtilsTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='<clinit>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtilsTest' method='testCleanupStr' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStr(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtilsTest' method='testCleanupStrDottedKeysKept' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.naming.StringUtils' method='cleanupStr' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.naming.StringUtilsTest.testCleanupStrDottedKeysKept(com.googlecode.jmxtrans.model.naming.StringUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='doWrite' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getEpoch' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests$2' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.IdentityValueTransformer' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests.identityTransformerDoesNothing(com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter$ResultValuesTransformer' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='firstNonNull' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='booleanValuesAreNotTransformedToNumber' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter$ResultValuesTransformer' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter$ResultValuesTransformer' method='apply' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Result' method='getObjDomain' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter$ResultValuesTransformer' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='removeSystemProperties' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='setUpOutputWriter' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests$2' method='internalWrite' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreNotTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='booleanValuesAreTransformedToNumber' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='<init>' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='apply' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.integerIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.stringIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='apply' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.integerIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.stringIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests$1' method='internalWrite' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests$1' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='apply' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='apply' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.booleanValuesAreTransformedToNumber(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.integerIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.stringIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='cannotHaveNullValueInSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests$TestBaseOuputWriter' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='setSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.cannotHaveNullValueInSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='setSettings' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntSetting' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='setSettings' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntSetting' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='propertyResolvedIntSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntSetting' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriter' method='getSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='propertyResolvedIntegerSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedIntegerSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getStringSetting' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.numberParsedAsStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.standardStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getStringSetting' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.numberParsedAsStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.standardStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getStringSetting' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.numberParsedAsStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.standardStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests' method='propertyResolvedStringSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.BaseOutputWriterTests.propertyResolvedStringSettings(com.googlecode.jmxtrans.model.output.BaseOutputWriterTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettingsWithDefault(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettingsWithDefault(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettingsWithDefault(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.numberParsedAsStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.standardStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='correctBooleanSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='correctBooleanSettingsWithDefault' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctBooleanSettingsWithDefault(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='correctIntSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='correctIntegerSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.correctIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='incorrectBooleanSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.incorrectBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='numberParsedAsStringSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.numberParsedAsStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='parsedFromInvalidStringIntSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntSetting' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='parsedFromInvalidStringIntegerSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromInvalidStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='parsedFromStringIntSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='parsedFromStringIntegerSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.parsedFromStringIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='standardStringSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.standardStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='typeConvertedIntSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='typeConvertedIntegerSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.typeConvertedIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='unsetBooleanSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='unsetIntSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntSetting' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='unsetIntegerSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getIntegerSetting' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetIntegerSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='unsetStringSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getStringSetting' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.unsetStringSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.SettingsTests' method='wrongTypeBooleanSettings' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.output.Settings' method='getBooleanSetting' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.output.SettingsTests.wrongTypeBooleanSettings(com.googlecode.jmxtrans.model.output.SettingsTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests' method='falseIsConvertedToNumber' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.falseIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.integerIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.stringIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformer' method='apply' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.integerIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.stringIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests' method='integerIsNotModified' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.integerIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests' method='stringIsNotModified' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.stringIsNotModified(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests' method='trueIsConvertedToNumber' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests.trueIsConvertedToNumber(com.googlecode.jmxtrans.model.results.BooleanAsNumberValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='2'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nonNumberIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='<clinit>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='4'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests' method='negativeValueAbovePrecisionIsNotTransformed' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nonNumberIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nullIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nonNumberIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nullIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='6'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.negativeValueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nonNumberIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nullIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='3'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nonNumberIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests' method='nonNumberIsReturnedUnmodified' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nonNumberIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='1'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nullIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests' method='nullIsReturnedUnmodified' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.nullIsReturnedUnmodified(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests' method='valueAbovePrecisionIsNotTransformed' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueAbovePrecisionIsNotTransformed(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests' method='valueBelowPrecisionIsTransformedToZero' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformer' method='apply' number='5'><tests>
<test name='com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests.valueBelowPrecisionIsTransformedToZero(com.googlecode.jmxtrans.model.results.CPrecisionValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests.identityTransformerDoesNothing(com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests' method='identityTransformerDoesNothing' number='0'><tests>
<test name='com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests.identityTransformerDoesNothing(com.googlecode.jmxtrans.model.results.IdentityValueTransformerTests)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinterTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='isAllowDottedKeys' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinter' method='prettyPrint' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='isLocal' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='getName' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinterTest' method='prettyJsonPrinting' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='getNumMultiThreadedServers' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='isUseObjDomainAsKey' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinterTest' method='prettyJsonPrinting' number='3'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Query' method='getTypeNames' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.JmxProcess' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinter' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinterTest' method='standardProcess' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.model.Server' method='getProtocolProviderPackages' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.prettyJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinterTest' method='standardJsonPrinting' number='3'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinterTest' method='standardJsonPrinting' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonPrinter' method='print' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonPrinterTest.standardJsonPrinting(com.googlecode.jmxtrans.util.JsonPrinterTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonUtilsTest$ByObj' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonUtilsTest$ByObj' method='apply' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonUtilsTest' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonUtilsTest$ByObj' method='<init>' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
<block classname='com.googlecode.jmxtrans.util.JsonUtilsTest' method='loadingFromFile' number='0'><tests>
<test name='com.googlecode.jmxtrans.util.JsonUtilsTest.loadingFromFile(com.googlecode.jmxtrans.util.JsonUtilsTest)'/>
</tests>
</block>
</coverage>
